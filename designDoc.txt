Comprehensive Design Document: shreTerm Terminal Emulator

1. Graphical User Interface with X11 Implementation

Core Architecture
The terminal emulator is built entirely on X11 libraries, providing a custom windowing solution that bypasses traditional terminal interfaces. The implementation follows a structured approach:

Window Management:
- Display Connection: 'XOpenDisplay(NULL)' establishes connection to the X server
- Window Creation: 'XCreateWindow()' with custom attributes for background, borders, and event masking
- Window Mapping: 'XMapWindow()' makes the window visible on the screen
- Resource Management: Proper cleanup with 'XDestroyWindow()' and 'XCloseDisplay()'

Rendering System:
- Font Loading: 'XLoadQueryFont("8x16")' with fallback to "fixed" font
- Text Drawing: 'XDrawString()' for character-by-character rendering
- Graphics Context: 'XCreateGC()' with configured font and colors
- Color Management: 'XAllocNamedColor()' for custom color palette

Multi-Tab System Architecture

Tab State Management:
Each tab maintains completely isolated state through the 'tabState' structure:

Tab Chrome Implementation:
- Visual Design: Custom-drawn tabs with rounded corners and gradients
- Interactive Elements:
  - Close buttons with hover states ('howerXClose' tracking)
  - Active tab highlighting with red underline indicator
  - "+" button for creating new tabs
- Hit Detection: 'navbarHit()' function maps mouse coordinates to tab elements
- Tab Operations:
  - Creation: 'addTab()' initializes new tab with default state
  - Closure: Tab removal with automatic focus reassignment
  - Switching: Keyboard shortcuts and mouse click support

2. External Command Execution Engine

Process Execution Pipeline

Command Processing Flow:
1. Input Parsing: Raw command string processing
2. Built-in Command Detection: Special handling for 'cd', 'clear', 'history'
3. Pipeline Analysis: Parse '|' characters for command chaining
4. Process Creation: Fork-exec pattern with proper file descriptor management


Output Capture Mechanism:
- Stdout/Stderr Pipes: Separate pipes for standard output and error streams
- Non-blocking I/O: 'poll()' system calls for efficient output reading
- Buffer Management: Dynamic string buffers for command output accumulation
- Line Processing: Output split into display-ready lines

Error Handling:
- Process Failure Detection: Wait status analysis with 'WIFEXITED()' and 'WEXITSTATUS()'
- Error Classification: Distinguishes between command errors and system errors
- User Feedback: Color-coded error messages with descriptive text

3. Multiline Input System

Unicode and Input Method Infrastructure


Wide Character Processing:
- Character Lookup: 'XwcLookupString()' for international character support
- Status Handling: Processes both 'XLookupChars' and 'XLookupBoth' statuses
- Buffer Management: Wide character buffer ('wchar_t wbuf[32]') for input storage

**Note on Unicode Limitation: While the infrastructure for Unicode input via XIM/XIC is implemented,
the actual rendering and display of Unicode characters in the terminal output is not fully functional.
The system can accept Unicode input but may not properly display all Unicode characters in command outputs.

4. Input/Output Redirection Support

Transparent Redirection through Bash

Implementation Strategy:
The terminal leverages bash's native redirection capabilities rather than implementing custom file descriptor management:

Redirection Handling:
- Input Redirection ('<'): Bash automatically handles file input redirection
- Output Redirection ('>'): Bash manages file output creation and writing
- Combined Redirection: Supports complex redirection patterns like 'cmd < input > output'
- Error Stream: Stderr is captured separately but follows the same redirection principles

Advantages:
- Robustness: Leverages bash's well-tested redirection logic
- Complexity Reduction: Avoids custom file descriptor management code
- Feature Completeness: Supports all bash redirection operators ('>>', '2>', '&>', etc.)

5. Pipe System Implementation

Multi-stage Pipeline Architecture

File Descriptor Cleanup:
- Parent Process: Closes all pipe ends after forking children
- Child Processes: Inherit only necessary file descriptors
- Resource Leak Prevention: Comprehensive close() calls for all pipe file descriptors

Complex Pipeline Support:
- Arbitrary Length: No practical limit on number of piped commands
- Mixed Operations: Supports pipes combined with redirections
- Error Propagation: Maintains error status through pipeline stages

6. multiWatch Command Implementation

Real-time Monitoring System

Thread-per-Command Model:
- Parallel Execution: Each command runs in its own thread
- Non-blocking I/O: Uses 'poll()' with timeout for responsive monitoring
- Output Capture: Pipe-based output redirection with non-blocking reads
- Process Management: Tracks child PIDs for proper signal handling


Signal Handling for Termination:
- Atomic Flag: 'mwStopReq' for clean thread termination
- Process Cleanup: Kills all monitored processes on Ctrl+C
- Resource Cleanup: Proper pipe and file descriptor management

7. Line Navigation Implementation

Visual Feedback:
- Cursor Blinking: 500ms blink interval with 'chrono::steady_clock'
- Position Calculation: Pixel-perfect cursor positioning using font metrics
- Immediate Redraw: Screen updates on every cursor movement

Multi-line Cursor Support:
- Line Tracking: Calculates current line within multi-line input
- Vertical Navigation: Handles cursor movement across line boundaries
- Visual Continuity: Maintains cursor visibility during complex edits

8. Command Interruption System

** Could not implement

9. Searchable History System

Search Interface:
- Activation: Ctrl+R enters search mode
- Interactive Prompt: "Enter search term:" with real-time matching
- Result Application: Auto-fills matched command into input buffer
- Recency Weighting: More recent matches take priority

10. Auto-completion System

File Name Completion Engine

Completion Workflow:
1. Tab Key Detection: Intercept Tab key in main event loop
2. Query Extraction: 'extractQuery()' isolates current completion context
3. Directory Scanning: 'execInDir("ls", T.cwd)' gets file list
4. Candidate Matching: 'getRecommendations()' filters matching files

Longest Common Prefix Calculation:
- Prefix Analysis: Finds maximum common starting substring
- Intelligent Defaulting: Uses longest prefix when multiple matches exist
- User Selection: Numbered list for manual match selection

Navigation Keys:
- Left/Right Arrows: Character-by-character cursor movement
- Up/Down Arrows: History navigation through command history
- Page Up/Down: Multi-line scrolling (3 lines per step)
- Ctrl+Home/Ctrl+End: Jump to top/bottom of scroll buffer

Tab Management:
- Ctrl+Tab: Switch to next tab (cycles through tabs)
- Ctrl+Shift+Tab: Switch to previous tab
- Mouse Click: Direct tab selection
- Close Button: Individual tab closure
- Escape Key: Close current tab or exit if last tab

Clipboard Support:
- Ctrl+V Paste: Implements X11 selection handling with 'XConvertSelection()'
- CLIPBOARD Integration: Supports system clipboard content
- Multi-line Paste: Proper handling of pasted text with newlines

Visual Enhancements:
- Color Coding:
  - Green: Command prompts
  - White: Normal output
  - Red: Error messages
  - Yellow: Recommendations and search results
- Cursor Blinking: 500ms blink interval for visibility
- Hover Effects: Visual feedback on tab close buttons and + button
- Scrollbar Simulation: Visual scroll position indicators

Advanced Input Handling:
- Multi-line Command Support: Automatic detection of incomplete commands
- Quote Balancing: Tracks '"' characters for proper multiline mode
- Input Buffer Management: Efficient string manipulation for large inputs
- Real-time Display Updates: Immediate visual feedback for all operations

Process Management:
- Background Operation: Non-blocking command execution
- Concurrent multiWatch: Parallel command monitoring without GUI freezing
- Proper Signal Propagation: Child process termination on shell exit
- Resource Cleanup: Comprehensive file descriptor and process cleanup
